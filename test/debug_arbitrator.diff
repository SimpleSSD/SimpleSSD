diff --git a/hil/nvme/queue_arbitrator.cc b/hil/nvme/queue_arbitrator.cc
index 2bf7b46..5518cc1 100644
--- a/hil/nvme/queue_arbitrator.cc
+++ b/hil/nvme/queue_arbitrator.cc
@@ -9,6 +9,10 @@
 
 #include "hil/nvme/controller.hh"
 
+#ifdef DEBUG_EVENT
+#define FAST_FORWARD_LIMIT 5
+#endif
+
 namespace SimpleSSD::HIL::NVMe {
 
 #define debugprint_ctrl(format, ...)                                           \
@@ -142,6 +146,11 @@ Arbitrator::Arbitrator(ObjectData &o, ControllerData *c)
   // Not running!
   run = false;
   running = false;
+
+#ifdef DEBUG_EVENT
+  ffcounter = 0;
+  lastWorkAt = 0;
+#endif
 }
 
 Arbitrator::~Arbitrator() {
@@ -191,6 +200,21 @@ void Arbitrator::ringSQ(uint16_t qid, uint16_t tail) {
       "SQ %-5d| Submission Queue Tail Doorbell | Item count in queue "
       "%d -> %d | head %d | tail %d -> %d",
       qid, oldcount, sq->getItemCount(), sq->getHead(), oldtail, sq->getTail());
+
+#ifdef DEBUG_EVENT
+  if (ffcounter >= FAST_FORWARD_LIMIT) {
+    ffcounter = 0;
+
+    uint64_t now = getTick();
+    uint64_t next = now - lastWorkAt;
+
+    if (LIKELY(next != 0)) {
+      next = DIVCEIL(next, period);
+    }
+
+    object.cpu->schedule(work, 0ull, lastWorkAt + period * next - now);
+  }
+#endif
 }
 
 void Arbitrator::ringCQ(uint16_t qid, uint16_t head) {
@@ -478,8 +502,8 @@ void Arbitrator::complete(CQContext *cqe, bool ignore) {
   // Insert to completion queue
   completionQueue.push_back(cqe);
 
-    cq->setData(cqe->getData(), eventCompDone);
-  }
+  cq->setData(cqe->getData(), eventCompDone);
+}
 
 void Arbitrator::completion_done() {
   auto cqe = completionQueue.front();
@@ -497,16 +521,16 @@ void Arbitrator::completion_done() {
   if (completionQueue.size() == 0) {
     auto id = cqe->getCCID();
 
-  // Pending abort events?
-  abort_SQDone();
-  abort_CommandDone(id);
+    // Pending abort events?
+    abort_SQDone();
+    abort_CommandDone(id);
 
-  // Shutdown?
-  if (UNLIKELY(shutdownReserved && checkShutdown())) {
-    finishShutdown();
+    // Shutdown?
+    if (UNLIKELY(shutdownReserved && checkShutdown())) {
+      finishShutdown();
+    }
   }
 }
-}
 
 void Arbitrator::abort_SQDone() {
   if (LIKELY(abortSQList.size() == 0)) {
@@ -653,11 +677,24 @@ void Arbitrator::collect() {
     }
   }
 
-  // Schedule collect
-  object.cpu->schedule(work, 0ull, period);
+#ifdef DEBUG_EVENT
+  if (ffcounter < FAST_FORWARD_LIMIT) {
+    lastWorkAt = getTick();
+#endif
+    // Schedule collect
+    object.cpu->schedule(work, 0ull, period);
+#ifdef DEBUG_EVENT
+  }
+#endif
 
   if (!handled) {
     running = false;
+#ifdef DEBUG_EVENT
+    ffcounter++;
+  }
+  else {
+    ffcounter = 0;
+#endif
   }
 }
 
diff --git a/hil/nvme/queue_arbitrator.hh b/hil/nvme/queue_arbitrator.hh
index c14333e..f19b500 100644
--- a/hil/nvme/queue_arbitrator.hh
+++ b/hil/nvme/queue_arbitrator.hh
@@ -17,6 +17,8 @@
 #include "sim/abstract_subsystem.hh"
 #include "util/sorted_map.hh"
 
+#define DEBUG_EVENT
+
 namespace SimpleSSD::HIL::NVMe {
 
 class ControllerData;
@@ -119,6 +121,11 @@ class Arbitrator : public Object {
   uint64_t period;
   uint64_t internalQueueSize;
 
+#ifdef DEBUG_EVENT
+  uint8_t ffcounter;
+  uint64_t lastWorkAt;
+#endif
+
   // Queue
   uint16_t cqSize;
   uint16_t sqSize;
